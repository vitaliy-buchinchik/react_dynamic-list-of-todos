{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getUser","userId","fetch","then","response","json","data","TodoList","state","titleFilter","sortTodos","titleChange","event","setState","target","value","todosSort","this","props","todos","selectedUser","preparedTodos","filter","todo","title","includes","completed","className","type","onChange","placeholder","map","id","classnames","key","readOnly","onClick","React","Component","CurrentUser","user","prevProps","clear","name","email","phone","App","selectedUserId","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad55db5a.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleFilter: '',\n    sortTodos: 'all',\n  }\n\n  titleChange = (event) => {\n    this.setState({ titleFilter: event.target.value });\n  }\n\n  todosSort = (event) => {\n    this.setState({ sortTodos: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUser } = this.props;\n\n    const preparedTodos = todos.filter(todo => todo.title && todo\n      .title.includes(this.state.titleFilter))\n      .filter((todo) => {\n        switch (this.state.sortTodos) {\n          case 'completed':\n            return todo.completed === true;\n          case 'active':\n            return todo.completed === false;\n          default:\n            return todo;\n        }\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          onChange={this.titleChange}\n          placeholder=\"Enter the title\"\n        />\n\n        <select\n          value={this.state.sortTodos}\n          onChange={this.todosSort}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(({ id, userId, title, completed }) => (\n              <li\n                className={classnames(\n                  'TodoList__item', completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked',\n                )}\n                key={id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{title}</p>\n                </label>\n                <button\n                  type=\"button\"\n                  className={classnames(\n                    'button TodoList__user-button',\n                    selectedUser.id === userId\n                      && 'TodoList__user-button--selected',\n                  )}\n                  onClick={() => selectedUser(userId)}\n                >\n                  User&nbsp;#\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectedUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              onClick={() => clear()}\n            >\n              Clear info\n            </button>\n          </>\n        ) : (\n          <span>Loading...</span>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectedUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUser={this.selectedUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}